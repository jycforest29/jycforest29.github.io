{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/블로그","result":{"pageContext":{"currentCategory":"블로그","categories":["All","블로그","featured"],"edges":[{"node":{"id":"185ef065-c6ca-5fc1-9658-ce2bbe3095e2","excerpt":"👋 소개 회사에서 처음으로 사고를 크게 하나 쳤다. 내 주요 업무는 우리 회사의 제품을 사용하는 사이트들에서 들어오는 이슈들을 해결하는 일인데, 제대로 분석을 하지 못해 사이트의 오픈 일정이 연기가 됐다. 그리고 제시간내에 분석을 하지 못한 이유는 GC 문제가 아닌데 GC가 원인이라고 생각해 시간이 지연됐기 때문이다.\n사수님은 그래도 이번 기회로 GC에 대해 더 잘 배웠으니 괜찮다라고 말씀하졌지만, 나는 괜찮지 않았다.\n나름 시간을 갈아서 열심히 했다고는 생각하지만, 솔직히 현재의 내 실력에서 열심히 하는 것 만으로는 정말 택도 없었다. 빠르게 GC 로그를 분석할 만큼 JVM에 대해 심화된 지식도 없었으며, 언제 어떤 자료를 요청해야 할지(스레드 덤프 등) 판단도 제대로 못했다. 또한 여러 로그들을 보고 사이트의 이슈 발생 상황과 제대로 연결짓지도 못했다.\n그야말로 자괴감이 어마어마하게 들었고, GC 더 나아가 JVM을 잘 아는 것에 대한 중요성을 뼈저리게 느끼게 되었다.\n그래서 …","fields":{"slug":"/gc/"},"frontmatter":{"categories":"블로그 featured","title":"자바 개발자가 GC를 잘 알아야 하는 이유","date":"January 02, 2024"}},"next":{"fields":{"slug":"/ghostcat-test/"}},"previous":null},{"node":{"id":"194b7102-914c-5c73-9840-62c12edf06e7","excerpt":"👋 소개 Tomcat의 취약점 중 하나인 CVE-2020-1938(GhostCat)은 Tomcat의 AJP 커넥터에서 발생한 취약점으로 WEB-INF/**에 접근해 서버의 파일을 탈취하거나 탈취한 코드를 바탕으로 악성 코드를 실행시킬 수 있다. 이를 위해서는 AJP 포트가 기본적으로 노출이 되어 있어야 하고 인터넷을 통해서 접근이 가능해야 한다는 전제 조건이 필요하다. 이 취약점은 서버 코드에서 특별한 세팅 없이 클라이언트가 바로 공격이 가능하기 때문이다. 여기서 왜 Tomcat에서 해당 취약점이 발생했고 어떻게 해결했는지 확인해보자. 🚀 취약점 원인 분석 Tomcat은 주로 서블릿 엔진의 역할을 하기에 클라이언트로부터 받은 요청을 요청된 자원의 처리 엔진에 넘겨주는 작업이 필요하다. 이를 위해 RequestDispacher.java 라는 코드에 정의된 여러 상수값들을 사용하는데 Tomcat의 경우 DefaultServlet이라는 클래스에서 해당 값들을 사용해 대상 서블릿의 경로를…","fields":{"slug":"/ghostcat-test/"},"frontmatter":{"categories":"블로그 featured","title":"CVE-2020-1938(GhostCat) 취약점 분석하기","date":"December 20, 2023"}},"next":null,"previous":{"fields":{"slug":"/gc/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}