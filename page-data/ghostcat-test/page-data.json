{"componentChunkName":"component---src-templates-blog-template-js","path":"/ghostcat-test/","result":{"data":{"cur":{"id":"194b7102-914c-5c73-9840-62c12edf06e7","html":"<h2 id=\"-소개\" style=\"position:relative;\"><a href=\"#-%EC%86%8C%EA%B0%9C\" aria-label=\" 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 소개</h2>\n<p>Tomcat의 취약점 중 하나인 CVE-2020-1938(GhostCat)은 Tomcat의 AJP 커넥터에서 발생한 취약점으로 WEB-INF/**에 접근해 서버의 파일을 탈취하거나 탈취한 코드를 바탕으로 악성 코드를 실행시킬 수 있다.</p>\n<p>이를 위해서는 AJP 포트가 기본적으로 노출이 되어 있어야 하고 인터넷을 통해서 접근이 가능해야 한다는 전제 조건이 필요하다. 이 취약점은 서버 코드에서 특별한 세팅 없이 클라이언트가 바로 공격이 가능하기 때문이다.</p>\n<p>여기서 왜 Tomcat에서 해당 취약점이 발생했고 어떻게 해결했는지 확인해보자.</p>\n<h2 id=\"-취약점-원인-분석\" style=\"position:relative;\"><a href=\"#-%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%9B%90%EC%9D%B8-%EB%B6%84%EC%84%9D\" aria-label=\" 취약점 원인 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚀 취약점 원인 분석</h2>\n<p>Tomcat은 주로 서블릿 엔진의 역할을 하기에 클라이언트로부터 받은 요청을 요청된 자원의 처리 엔진에 넘겨주는 작업이 필요하다. 이를 위해 RequestDispacher.java 라는 코드에 정의된 여러 상수값들을 사용하는데 Tomcat의 경우 DefaultServlet이라는 클래스에서 해당 값들을 사용해 대상 서블릿의 경로를 찾는다.</p>\n<p>문제는 입력받은 요청을 파싱해 DefaultServlet으로 보낼 때 요청에 있는 attribute 들을 Tomcat에서 검증하지 않았다는 것에 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token class-name\">AjpProcessor</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prepareRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\n\t<span class=\"token comment\">// Decode extra attributes</span>\n\t<span class=\"token keyword\">boolean</span> secret <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">byte</span> attributeCode<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>attributeCode <span class=\"token operator\">=</span> requestHeaderMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">!=</span> <span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SC_A_ARE_DONE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>attributeCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SC_A_REQ_ATTRIBUTE</span> <span class=\"token operator\">:</span>\n\t\trequestHeaderMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span>tmpMB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> n <span class=\"token operator\">=</span> tmpMB<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\trequestHeaderMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span>tmpMB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> v <span class=\"token operator\">=</span> tmpMB<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/*\n\t\t * AJP13 misses to forward the local IP address and the\n\t\t * remote port. Allow the AJP connector to add this info via\n\t\t * private request attributes.\n\t\t * We will accept the forwarded data and remove it from the\n\t\t * public list of request attributes.\n\t\t */</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SC_A_REQ_LOCAL_ADDR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    request<span class=\"token punctuation\">.</span><span class=\"token function\">localAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SC_A_REQ_REMOTE_PORT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t        request<span class=\"token punctuation\">.</span><span class=\"token function\">setRemotePort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> nfe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t        <span class=\"token comment\">// Ignore invalid value</span>\n\t\t    <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SC_A_SSL_PROTOCOL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SSLSupport</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROTOCOL_VERSION_KEY</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t    request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실질적인 검증 안함</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token class-name\">DefaultServlet</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRelativePath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> allowEmptyPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token class-name\">String</span> servletPath<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> pathInfo<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestDispatcher</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INCLUDE_REQUEST_URI</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// For includes, get the info from the attributes</span>\n            pathInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestDispatcher</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INCLUDE_PATH_INFO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            servletPath <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestDispatcher</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INCLUDE_SERVLET_PATH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            pathInfo <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getPathInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            servletPath <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getServletPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serveResource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n                                 <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>\n                                 <span class=\"token keyword\">boolean</span> content<span class=\"token punctuation\">,</span>\n                                 <span class=\"token class-name\">String</span> inputEncoding<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        \n        <span class=\"token class-name\">WebResource</span> resource <span class=\"token operator\">=</span> resources<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        \n        <span class=\"token keyword\">boolean</span> included <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Check if the conditions specified in the optional If headers are</span>\n        <span class=\"token comment\">// satisfied.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Checking If headers</span>\n            included <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token class-name\">RequestDispatcher</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INCLUDE_CONTEXT_PATH</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>included <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isError <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">checkIfHeaders</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n        </code></pre></div>\n<h2 id=\"-취약점-재현하기\" style=\"position:relative;\"><a href=\"#-%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%9E%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\" 취약점 재현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🦖 취약점 재현하기</h2>\n<h3 id=\"poc-코드-분석\" style=\"position:relative;\"><a href=\"#poc-%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"poc 코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POC 코드 분석</h3>\n<p>공개된 취약점들은 주로 POC 코드를 통해 공격 재현을 해볼 수 있다.\n[<a href=\"https://github.com/00theway/Ghostcat-CNVD-2020-10487\">https://github.com/00theway/Ghostcat-CNVD-2020-10487</a>] <a href=\"https://github.com/00theway/Ghostcat-CNVD-2020-10487\">https://github.com/00theway/Ghostcat-CNVD-2020-10487</a> 본인은 이  POC 코드를 사용했는데 github에 공개된 다른 POC 코드를 사용해도 된다.</p>\n<p>이 코드의 핵심은 Tomcat에서 사용하는 javax.servlet.include.request_uri, javax.servlet.include.servlet_path 값을 변조시켜 Tomcat의 AjpProcessor.java의 SC_A_REQ_ATTRIBUTE 부분을 타게 만든다는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_attributes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''\n        org.apache.catalina.jsp_file\n        javax.servlet.include.servlet_path + javax.servlet.include.path_info\n        '''</span>\n        attribute2code <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">b'remote_user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\x03'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">b'auth_type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\x04'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">b'query_string'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\x05'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">b'jvm_route'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\x06'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">b'ssl_cert'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\x07'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">b'ssl_cipher'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\x08'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">b'ssl_session'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\x09'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">b'req_attribute'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\x0A'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># Name (the name of the attribut follows)</span>\n            <span class=\"token string\">b'ssl_key_size'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\x0B'</span>\n        <span class=\"token punctuation\">}</span>\n        attributes_ajp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">:</span>\n            code <span class=\"token operator\">=</span> attribute2code<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> code <span class=\"token operator\">!=</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">:</span>\n                attributes_ajp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> code <span class=\"token operator\">==</span> <span class=\"token string\">b'\\x0A'</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> value<span class=\"token punctuation\">:</span>\n                        attributes_ajp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ajp_string<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> SC_A_REQ_ATTRIBUTE 타게 만듬\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    attributes_ajp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ajp_string<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>attributes_ajp<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"실행하기\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0\" aria-label=\"실행하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행하기</h3>\n<p>아래 명령어를 실행하여 실행해보자. 참고로 해당 취약점에 대한 보안패치가 적용되지 않은 톰캣 버전을 설치해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">{</span>톰캣 설치경로<span class=\"token punctuation\">}</span>/bin\n\n$ ./startup.sh</code></pre></div>\n<br/>\n<p>이제 다음 명령어를 사용해 Tomcat의 기본 AJP port인 8009가 열려있는지 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> nmet <span class=\"token parameter variable\">-sS</span> <span class=\"token parameter variable\">-p</span> <span class=\"token punctuation\">[</span>port 번호<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ip<span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n<p>열려있으면 POC 코드의 공격 형식에 맞게 터미널에서 요청을 보내보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python3 ajpShooter.py <span class=\"token punctuation\">[</span>ip<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>http port<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ajp port<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>target path<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>read or eval<span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n<p>본인은 /WEB-INF/web.xml 에 대해 read 하는 요청을 보냈고 결과는 200으로 정상적이라면 호출되면 안될 파일이\n보여졌다.</p>\n<h3 id=\"wireshark로-패킷-확인하기\" style=\"position:relative;\"><a href=\"#wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"wireshark로 패킷 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>wireshark로 패킷 확인하기</h3>\n<p>정확한 패킷 통신 과정을 확인하기 위해 wireshark를 써서 확인할 수도 있다.</p>\n<p>우선 터미널에서 sudo 권한으로 wireshark를 열어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> wireshark</code></pre></div>\n<br/>\n<p>any를 클릭 후 tcp.port == 8009 || tcp.port == 8080 로 Tomcat의 AJP, HTTP 프로토콜에 대해서만 필터링을 한다. 이후 ajpShooter.py로 요청을 보내볼 경우 정상적으로 3-way-handshake 후 패킷 통신이 되는 것을 확인할 수 있다.</p>\n<h2 id=\"취약점-해결-방법\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"취약점 해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취약점 해결 방법</h2>\n<p>해당 취약점이 발생한 원인은 전달받은 요청의 attribute에 대한 검증을 하지 않는 것에 있었다.\n따라서 Tomcat에서는 이에 대한 로직을 수정했는데, 커밋 기록 중 5a5494f0 을 확인하면 전달받은 요청에 대해 여러 attribute를 validate 하는 것을 알 수 있다.</p>\n<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<p>이 취약점 분석은 AJP를 분석해야 하는 기회가 생겨 여러 아티클을 찾아보다가 발견해 하게 되었는데, 사실 명시적으로 할당된 일은 아니지만 안하고 지나가기엔 좀 찝찝하고 언젠간 해보고 싶다고 생각한 일이라 해보았다.</p>\n<p>이런 재현이 처음이라 좀 무서워서 내부망으로 다 바꿔가며 호들갑 떨며 했었는데 왜 격리된 컨테이너 환경이나 가상 OS 환경이 취약점 재현 시 중요한지 확실히 체감했다.</p>\n<p>이 분석으로 wireshark 사용방법이나 터미널에서 tcp 기반의 port가 열려있는지 확인하는 여러 방법 등 코어 레벨에 가까운 다양한 지식들을 배울 수 있었는데 이를 통해 더 능숙해졌으면 좋겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%86%8C%EA%B0%9C\">👋 소개</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%9B%90%EC%9D%B8-%EB%B6%84%EC%84%9D\">🚀 취약점 원인 분석</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%9E%AC%ED%98%84%ED%95%98%EA%B8%B0\">🦖 취약점 재현하기</a></p>\n<ul>\n<li><a href=\"#poc-%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\">POC 코드 분석</a></li>\n<li><a href=\"#%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0\">실행하기</a></li>\n<li><a href=\"#wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\">wireshark로 패킷 확인하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\">취약점 해결 방법</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%9A%8C%EA%B3%A0\">회고</a></p>\n</li>\n</ul>\n</div>","excerpt":"👋 소개 Tomcat의 취약점 중 하나인 CVE-2020-1938(GhostCat)은 Tomcat의 AJP 커넥터에서 발생한 취약점으로 WEB-INF/**에 접근해 서버의 파일을 탈취하거나 탈취한 코드를 바탕으로 악성 코드를 실행시킬 수 있다. 이를 위해서는 AJP 포트가 기본적으로 노출이 되어 있어야 하고 인터넷을 통해서 접근이 가능해야 한다는 전제 조건이 필요하다. 이 취약점은 서버 코드에서 특별한 세팅 없이 클라이언트가 바로 공격이 가능하기 때문이다. 여기서 왜 Tomcat에서 해당 취약점이 발생했고 어떻게 해결했는지 확인해보자. 🚀 취약점 원인 분석 Tomcat은 주로 서블릿 엔진의 역할을 하기에 클라이언트로부터 받은 요청을 요청된 자원의 처리 엔진에 넘겨주는 작업이 필요하다. 이를 위해 RequestDispacher.java 라는 코드에 정의된 여러 상수값들을 사용하는데 Tomcat의 경우 DefaultServlet이라는 클래스에서 해당 값들을 사용해 대상 서블릿의 경로를…","frontmatter":{"date":"December 20, 2023","title":"CVE-2020-1938(GhostCat) 취약점 분석하기","categories":"블로그 featured","author":"최주연","emoji":"🧢"},"fields":{"slug":"/ghostcat-test/"}},"next":null,"prev":{"id":"185ef065-c6ca-5fc1-9658-ce2bbe3095e2","html":"<h2 id=\"-소개\" style=\"position:relative;\"><a href=\"#-%EC%86%8C%EA%B0%9C\" aria-label=\" 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 소개</h2>\n<p>1주동안 gc에 관한 업무를 받아 gc에 대해 깊이있게 학습하였다.\n해당 업무를 해결하기 위해 MAT를 통한 힙 덤프 분석, gc로그 분석, 여러 gc 전략이나 옵션 등을 학습했는데 다시 gc에 대한 업무를 맡았을 때 더 효율적으로 수행하고자 정리하려 한다.</p>\n<h2 id=\"gc란\" style=\"position:relative;\"><a href=\"#gc%EB%9E%80\" aria-label=\"gc란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gc란?</h2>\n<h2 id=\"여러-gc-collector-전략\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-gc-collector-%EC%A0%84%EB%9E%B5\" aria-label=\"여러 gc collector 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 gc collector 전략</h2>\n<h2 id=\"jvm-gc-튜닝\" style=\"position:relative;\"><a href=\"#jvm-gc-%ED%8A%9C%EB%8B%9D\" aria-label=\"jvm gc 튜닝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jvm gc 튜닝</h2>\n<h2 id=\"힙-덤프\" style=\"position:relative;\"><a href=\"#%ED%9E%99-%EB%8D%A4%ED%94%84\" aria-label=\"힙 덤프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙 덤프</h2>\n<h3 id=\"힙-덤프-뜨기\" style=\"position:relative;\"><a href=\"#%ED%9E%99-%EB%8D%A4%ED%94%84-%EB%9C%A8%EA%B8%B0\" aria-label=\"힙 덤프 뜨기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙 덤프 뜨기</h3>\n<h3 id=\"mat를-통해-힙-덤프-분석하기\" style=\"position:relative;\"><a href=\"#mat%EB%A5%BC-%ED%86%B5%ED%95%B4-%ED%9E%99-%EB%8D%A4%ED%94%84-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0\" aria-label=\"mat를 통해 힙 덤프 분석하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MAT를 통해 힙 덤프 분석하기</h3>\n<h3 id=\"gc-로그\" style=\"position:relative;\"><a href=\"#gc-%EB%A1%9C%EA%B7%B8\" aria-label=\"gc 로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gc 로그</h3>\n<h3 id=\"gc-로그-생성하기\" style=\"position:relative;\"><a href=\"#gc-%EB%A1%9C%EA%B7%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"gc 로그 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gc 로그 생성하기</h3>\n<h3 id=\"gc-로그-분석하기\" style=\"position:relative;\"><a href=\"#gc-%EB%A1%9C%EA%B7%B8-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0\" aria-label=\"gc 로그 분석하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gc 로그 분석하기</h3>\n<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<p>업무 중 가장 어려운 것은 1) 잘 모를 때 2) 빨리 해내야 할 때 3) 간헐적으로 발생할 때 인 것 같다.\n이번에는 3개가 모두 합쳐져서 좀 어려웠는데, 마치 여러 단서들을 갖고 원인을 추정하는 탐정이 된 것 같았다.\nC가 발생하는 이유는 A라는 조건과 B라는 조건을 만족해서 아닐까..? 이런 추론 방식으로 문제를 해결하려 했는데 내 눈에 확실한 건 결과인 C밖에 안보이니 좀 답답하고 확신이 없었던 것 같다.</p>\n<p>나는 지금까지 업무를 하면서 그래도 어느정도 잘한다고 생각했는데, 나만의 생각이었던 것 같기도 하다.. gc도 결국 메모리 관리라 크게 보면 중요 CS 지식에 당연히 들어갈텐데 내 기초가 생각보다 더 없는 것 같다.\n뭐 결국 더 하는 방법밖에 없기에 2024년에는 자주, 많이 이렇게 새로 알게된 내용을 작성하려 한다.</p>\n<p>어쩌다보니 1월 2일부터 야근을 하게 되었는데.. 아자아자.. 할 수 있다..</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%86%8C%EA%B0%9C\">👋 소개</a></p>\n</li>\n<li>\n<p><a href=\"#gc%EB%9E%80\">gc란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%AC%EB%9F%AC-gc-collector-%EC%A0%84%EB%9E%B5\">여러 gc collector 전략</a></p>\n</li>\n<li>\n<p><a href=\"#jvm-gc-%ED%8A%9C%EB%8B%9D\">jvm gc 튜닝</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%9E%99-%EB%8D%A4%ED%94%84\">힙 덤프</a></p>\n<ul>\n<li><a href=\"#%ED%9E%99-%EB%8D%A4%ED%94%84-%EB%9C%A8%EA%B8%B0\">힙 덤프 뜨기</a></li>\n<li><a href=\"#mat%EB%A5%BC-%ED%86%B5%ED%95%B4-%ED%9E%99-%EB%8D%A4%ED%94%84-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0\">MAT를 통해 힙 덤프 분석하기</a></li>\n<li><a href=\"#gc-%EB%A1%9C%EA%B7%B8\">gc 로그</a></li>\n<li><a href=\"#gc-%EB%A1%9C%EA%B7%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\">gc 로그 생성하기</a></li>\n<li><a href=\"#gc-%EB%A1%9C%EA%B7%B8-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0\">gc 로그 분석하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%9A%8C%EA%B3%A0\">회고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 02, 2024","title":"GC에 대하여","categories":"블로그 featured","author":"최주연","emoji":"🧢"},"fields":{"slug":"/gc/"}},"site":{"siteMetadata":{"siteUrl":"https://jycforest29.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/ghostcat-test/","nextSlug":"","prevSlug":"/gc/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}