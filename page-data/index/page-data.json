{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"185ef065-c6ca-5fc1-9658-ce2bbe3095e2","excerpt":"👋 소개 회사에서 처음으로 사고를 하나 쳤다. 코드를 잘못 짜거나 한 건 아니고, 문제 상황의 원인을 분석하는 업무가 주어졌는데 분석을 제시간내에 하지 못하였다. 지금까지는 운이 좋았던건지 다행히 내가 생각한 원인들이 대체로 맞았었고 스스로도 문제 해결 속도가 빠르다고 생각하고 있었는데, 이번 업무가 제대로 그런 생각을 바꿔놓았다. 회사 업무이기에 자세한 상황은 작성하지 못하지만, gc 관련 옵션에 의해 문제 상황이 어느정도 해소되기에 처음부터 gc에 포커스를 맞추고 분석했고 여러 정황들이 gc 문제인 것을 가리킨다고 생각했는데 .. gc 문제가 아닌 것으로 잠정 결론이 났다. 나름대로는 충격이 꽤 컸기에 사실 이걸 정리하는 것도 힘들지만, 그래도 gc에 대해서는 주니어 수준에서 할만한 많은 부분을 봤다고 생각하기에 우선 정리는 해보려고 한다. gc란? 여러 gc collector 전략 jvm gc 튜닝 힙 덤프 힙 덤프 뜨기 MAT를 통해 힙 덤프 분석하기 gc 로그 gc 로그 …","frontmatter":{"categories":"블로그 featured","title":"GC에 대하여","date":"January 02, 2024"},"fields":{"slug":"/gc/"}}},{"node":{"id":"194b7102-914c-5c73-9840-62c12edf06e7","excerpt":"👋 소개 Tomcat의 취약점 중 하나인 CVE-2020-1938(GhostCat)은 Tomcat의 AJP 커넥터에서 발생한 취약점으로 WEB-INF/**에 접근해 서버의 파일을 탈취하거나 탈취한 코드를 바탕으로 악성 코드를 실행시킬 수 있다. 이를 위해서는 AJP 포트가 기본적으로 노출이 되어 있어야 하고 인터넷을 통해서 접근이 가능해야 한다는 전제 조건이 필요하다. 이 취약점은 서버 코드에서 특별한 세팅 없이 클라이언트가 바로 공격이 가능하기 때문이다. 여기서 왜 Tomcat에서 해당 취약점이 발생했고 어떻게 해결했는지 확인해보자. 🚀 취약점 원인 분석 Tomcat은 주로 서블릿 엔진의 역할을 하기에 클라이언트로부터 받은 요청을 요청된 자원의 처리 엔진에 넘겨주는 작업이 필요하다. 이를 위해 RequestDispacher.java 라는 코드에 정의된 여러 상수값들을 사용하는데 Tomcat의 경우 DefaultServlet이라는 클래스에서 해당 값들을 사용해 대상 서블릿의 경로를…","frontmatter":{"categories":"블로그 featured","title":"CVE-2020-1938(GhostCat) 취약점 분석하기","date":"December 20, 2023"},"fields":{"slug":"/ghostcat-test/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"최주연","bio":{"role":"개발자","description":["어려운 내용을 쉽게 전달하는"],"thumbnail":"sample.png"},"social":{"github":"https://github.com/jycforest29","linkedIn":"","email":"jycforest29.dev@gmail.com"}}}}},"pageContext":{}},"staticQueryHashes":["1073350324","1956554647","2938748437","3350743975"]}