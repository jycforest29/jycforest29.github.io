{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"194b7102-914c-5c73-9840-62c12edf06e7","excerpt":"👋 소개 Tomcat의 취약점 중 하나인 CVE-2020-1938(GhostCat)은 Tomcat의 AJP 커넥터에서 발생한 취약점으로 WEB-INF/**에 접근해 서버의 파일을 탈취하거나 탈취한 코드를 바탕으로 악성 코드를 실행시킬 수 있다. 이를 위해서는 AJP 포트가 기본적으로 노출이 되어 있어야 하고 인터넷을 통해서 접근이 가능해야 한다는 전제 조건이 필요하다. 이 취약점은 서버 코드에서 특별한 세팅 없이 클라이언트가 바로 공격이 가능하기 때문이다. 여기서 왜 Tomcat에서 해당 취약점이 발생했고 어떻게 해결했는지 확인해보자. 🚀 취약점 원인 분석 Tomcat은 주로 서블릿 엔진의 역할을 하기에 클라이언트로부터 받은 요청을 요청된 자원의 처리 엔진에 넘겨주는 작업이 필요하다. 이를 위해 RequestDispacher.java 라는 코드에 정의된 여러 상수값들을 사용하는데 Tomcat의 경우 DefaultServlet이라는 클래스에서 해당 값들을 사용해 대상 서블릿의 경로를…","frontmatter":{"categories":"블로그 featured","title":"CVE-2020-1938(GhostCat) 취약점 분석하기","date":"December 20, 2023"},"fields":{"slug":"/ghostcat-test/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"최주연","bio":{"role":"개발자","description":["사람에 가치를 두는","능동적으로 일하는","이로운 것을 만드는"],"thumbnail":"sample.png"},"social":{"github":"","linkedIn":"","email":""}}}}},"pageContext":{}},"staticQueryHashes":["1073350324","1956554647","2938748437","3350743975"]}